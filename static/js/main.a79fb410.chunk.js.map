{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","tabIndex","id","jokeID","onClick","upVote","onKeyPress","onPress","style","borderColor","getColor","downVote","text","getEmoji","Component","JokeList","handelTab","e","charCode","newClass","target","classList","handleVote","handleClick","state","jokes","JSON","parse","window","localStorage","getItem","loading","loadedJokes","Set","map","j","bind","length","getJokes","jokesArray","numberOfJokes","axios","get","headers","accept","res","newJokes","data","joke","has","console","log","push","uuid","setState","currSt","setItem","stringify","alert","updateNumber","prevSate","singleJoke","sort","a","b","href","key","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a79fb410.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./Joke.scss\"\nclass Joke extends Component {\n\n    getColor() {\n        if (this.props.votes >= 15) {\n          return \"#009432\";\n        } else if (this.props.votes >= 12) {\n          return \"#8BC34A\";\n        } else if (this.props.votes >= 9) {\n          return \"#CDDC39\";\n        } else if (this.props.votes >= 6) {\n          return \"#FFEB3B\";\n        } else if (this.props.votes >= 3) {\n          return \"#f78888\";\n        } else if (this.props.votes >= 0) {\n          return \"#F79F1F\";\n        } else {\n          return \"#EA2027\";\n        }\n      }\n      getEmoji() {\n        if (this.props.votes >= 15) {\n          return \"em em-rolling_on_the_floor_laughing\";\n        } else if (this.props.votes >= 12) {\n          return \"em em-laughing\";\n        } else if (this.props.votes >= 9) {\n          return \"em em-smiley\";\n        } else if (this.props.votes >= 6) {\n          return \"em em-slightly_smiling_face\";\n        } else if (this.props.votes >= 3) {\n          return \"em em-neutral_face\";\n        } else if (this.props.votes >= 0) {\n          return \"em em-confused\";\n        } else {\n          return \"em em-angry\";\n        }\n      }\n\n    render() {\n        return (\n          <div className='Joke'>\n            <div className='Joke__buttons' tabIndex=\"0\">\n              <i id = {this.props.jokeID} className='fas fa-arrow-up' tabIndex=\"0\" onClick={this.props.upVote} onKeyPress={this.props.onPress}/>\n              <span className='Joke__votes' style={{ borderColor: this.getColor() }}>\n                {this.props.votes}\n              </span>\n              <i id = {this.props.jokeID} className='fas fa-arrow-down' tabIndex=\"0\" onClick={this.props.downVote} onKeyPress={this.props.onPress}/>\n            </div>\n            <div className='Joke__text'>{this.props.text}</div>\n            <div className='Joke__emoji'>\n              <i className={this.getEmoji()} />\n            </div>\n          </div>\n        );\n      }\n}\n \nexport default Joke;\n","import React, { Component } from 'react';\nimport Joke from './Joke';\nimport axios from 'axios';\nimport uuid from 'uuid/v4';// generating a unique ID\nimport './JokeList.scss';\n\nclass JokeList extends Component {\n    static defaultProps = {\n       numberOfJokes : 10,\n    };\n   constructor(props){\n       super(props);\n       this.state = {\n           //load 7 jokes from localStage and if nothing there ,set to an empty array.\n           jokes : JSON.parse(window.localStorage.getItem(\"jokes\")||\"[]\"), // JSON.parse in order to get the data from localStorage \n           loading: false,                                                 //which is a string and turn in into an object.\n       }\n       this.loadedJokes = new Set(this.state.jokes.map(j=>j.text)); // preventing duplicate jokes \n       this.handleClick= this.handleClick.bind(this);\n   }\n\n   componentDidMount() {\n      if(this.state.jokes.length=== 0) this.getJokes();\n   }\n\n   async getJokes() {\n    try {\n    let jokesArray = [];\n     //load jokes \n    while (jokesArray.length < this.props.numberOfJokes) {\n       let res=  await axios.get(\"https://icanhazdadjoke.com/\", \n          {headers: {accept: \"application/json\"}\n   });\n   let newJokes = res.data.joke;\n   if(!this.loadedJokes.has(newJokes)){\n    jokesArray.push({id:uuid(), text: newJokes, votes: 0});\n   } else {\n       console.log(newJokes);\n   }\n \n    }\n\n    this.setState(currSt=> ({\n        loading:false,\n        jokes: [...currSt.jokes , ...jokesArray]\n    }),\n    ()=> window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)) // update votes in localStorage \n    //stringify because it only accpets a string \n    );\n  } catch(e) {\n      alert (`Sorry ðŸ˜ŸðŸ˜ŸðŸ˜Ÿ ${e} ðŸ˜ŸðŸ˜ŸðŸ˜Ÿ` );\n      this.setState({\n          loading:false,\n      })\n  }\n}\n   handleVote(id, updateNumber) {\n       this.setState(\n           prevSate => ({\n               jokes: prevSate.jokes.map((singleJoke=>\n                singleJoke.id===id ? {...singleJoke, votes: singleJoke.votes + updateNumber}:singleJoke))\n           }),\n           ()=> window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes)) // update votes in localStorage\n        );  \n   }\n   handleClick(){\n       this.setState({ loading: true  }, this.getJokes); //passing the function as second parameter so I make sure- \n                                                         //user get the reults after loading\n   }\n\n    handelTab=(e)=> {  // for accessibility \n      if (e.charCode === 13) {\n        let newClass = [...e.target.classList]\n       if(newClass[1]=== \"fa-arrow-up\"){\n        this.handleVote(e.target.id, 1);\n       } else if(newClass[1]=== \"fa-arrow-down\"){\n        this.handleVote(e.target.id, -1);\n        } else {\n        this.handleClick();\n        }\n    }\n    }\n\n    render() { \n        if(this.state.loading) {\n            return(\n                <div className=\"Loading\">\n                   <i className=\"far fa-8x fa-laugh fa-spin\"/>\n                   <h1 className=\"Loading__title\">...Loading</h1>\n                </div>\n            )\n        }\n        let jokes = this.state.jokes.sort((a,b)=> b.votes - a.votes); // sorting jokes based on votes \n        return ( \n            <div className=\"JokeList\">\n               <a href=\"#btn\" className=\"skip-link\">Skip to main content.</a>\n                <h1 className=\"JokeList__title\">Safi style <span className=\"underline--magical\">jokes</span></h1>\n                <h3 className=\"JokeList__vote\">Click arrows to <span className =\"JokeList__vote-up\">Upvote</span> and <span className =\"JokeList__vote-down\">Downvote</span> jokes</h3>\n                <div className=\"JokeList__Joke\">\n                 {jokes.map(j=> \n                 <Joke key={j.id} \n                 votes={j.votes} \n                 text={j.text} \n                 upVote={()=>this.handleVote(j.id, 1)}\n                 downVote = {()=> this.handleVote(j.id, -1)}\n                 onPress={this.handelTab}\n                 jokeID = {j.id}\n                 />\n                 )}\n                </div>\n                <div className=\"JokeList__info\">\n                 <h2 className=\"JokeList__heading \">Want more corny <span className=\"underline--magical\">jokes?</span></h2>\n                 <button className=\"JokeList__btn\" id=\"btn\" tabIndex=\"0\" onClick={this.handleClick} onKeyPress={this.handelTab}>get more jokes</button>\n                </div>\n            </div>\n           );\n    }\n}\n \nexport default JokeList;","import React, { Component } from 'react';\nimport './App.scss';\nimport JokeList from './JokeList';\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <div className=\"App\">\n        <JokeList/>\n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}