{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","className","onClick","this","props","upVote","votes","downVote","text","Component","JokeList","state","jokes","jokesArray","length","numberOfJokes","axios","get","headers","accept","res","push","id","uuid","data","joke","console","log","setState","updateNumber","prevSate","map","singleJoke","jokeList-title","j","key","handelVote","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAkBeA,E,iLAbP,OACI,yBAAKC,UAAU,QACZ,yBAAKA,UAAU,eACf,uBAAGA,UAAU,kBAAkBC,QAASC,KAAKC,MAAMC,SACnD,8BAAOF,KAAKC,MAAME,OAClB,uBAAGL,UAAU,oBAAoBC,QAASC,KAAKC,MAAMG,YAErD,yBAAKN,UAAU,aAAaE,KAAKC,MAAMI,W,GAVnCC,a,kRCMbC,E,YAIH,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,MAAQ,IAHE,E,mMASVC,EAAa,G,YACZA,EAAWC,OAASX,KAAKC,MAAMW,e,gCACnBC,IAAMC,IAAI,8BACvB,CAACC,QAAS,CAACC,OAAQ,sB,OADlBC,E,OAGPP,EAAWQ,KAAK,CAACC,GAAGC,MAAQf,KAAMY,EAAII,KAAKC,KAAMnB,MAAO,I,sBAExDoB,QAAQC,IAAId,GAEZV,KAAKyB,SAAS,CACVhB,MAAOC,I,wIAIFS,EAAIO,GACX1B,KAAKyB,UACD,SAAAE,GAAQ,MAAK,CACTlB,MAAOkB,EAASlB,MAAMmB,KAAK,SAAAC,GAAU,OACpCA,EAAWV,KAAKA,E,yVAAhB,IAAyBU,EAAzB,CAAqC1B,MAAO0B,EAAW1B,MAAQuB,IAAcG,W,+BAI/E,IAAD,OACL,OACI,yBAAK/B,UAAU,YACX,wBAAIgC,kBAAA,GAAJ,oBACA,yBAAKhC,UAAU,iBACbE,KAAKQ,MAAMC,MAAMmB,KAAI,SAAAG,GAAC,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAEZ,GACbhB,MAAO4B,EAAE5B,MACTE,KAAM0B,EAAE1B,KACRH,OAAQ,kBAAI,EAAK+B,WAAWF,EAAEZ,GAAI,IAClCf,SAAY,kBAAK,EAAK6B,WAAWF,EAAEZ,IAAK,UAIzC,wBAAIZ,SAAS,kBAAb,2CACA,4BAAQT,UAAU,mBAAlB,uB,GAlDOQ,aAAjBC,EACK2B,aAAe,CACnBtB,cAAgB,GAsDRL,QCjDA4B,E,2MAVb3B,MAAQ,G,wEAEN,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,W,GALUQ,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5157636e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Joke extends Component {\n\n    render() { \n        return (\n            <div className=\"Joke\">\n               <div className=\"Joke-button\">\n               <i className=\"fas fa-arrow-up\" onClick={this.props.upVote}></i>\n               <span>{this.props.votes}</span>\n               <i className=\"fas fa-arrow-down\" onClick={this.props.downVote}></i>\n               </div>\n               <div className=\"Joke-text\">{this.props.text}</div>\n            </div>\n          );\n    }\n}\n \nexport default Joke;","import React, { Component } from 'react';\nimport Joke from './Joke';\nimport axios from 'axios';\nimport uuid from 'uuid/v4';\nimport './JokeList.scss';\nimport { jsxAttribute } from '@babel/types';\n\n\nclass JokeList extends Component {\n    static defaultProps = {\n       numberOfJokes : 7,\n    };\n   constructor(props){\n       super(props);\n       this.state = {\n           jokes : [],\n       }\n   }\n\n   async componentDidMount() {\n       //load jokes \n       let jokesArray = [];\n     while (jokesArray.length < this.props.numberOfJokes) {\n        let res=  await axios.get(\"https://icanhazdadjoke.com/\", \n           {headers: {accept: \"application/json\"}\n    });\n     jokesArray.push({id:uuid(), text: res.data.joke, votes: 0});\n     }\n     console.log(jokesArray );\n\n     this.setState({ \n         jokes: jokesArray\n         });\n   }\n\n   handelVote(id, updateNumber) {\n       this.setState(\n           prevSate => ({\n               jokes: prevSate.jokes.map((singleJoke=>\n                singleJoke.id===id ? {...singleJoke, votes: singleJoke.votes + updateNumber}:singleJoke))\n           })\n       )   \n   }\n    render() { \n        return ( \n            <div className=\"JokeList\">\n                <h1 jokeList-title>Safi style jokes</h1>\n                <div className=\"jokeList-joke\">\n                 {this.state.jokes.map(j=> \n                 <Joke key={j.id} \n                 votes={j.votes} \n                 text={j.text} \n                 upVote={()=>this.handelVote(j.id, 1)}\n                 downVote = {()=> this.handelVote(j.id, -1)}\n                 />\n                 )}\n                </div>\n                <h2 JokeList=\"jokeList-guide\">Do you want more of these cheesy jokes?</h2>\n                <button className=\"jokeList-button\">get more jokes</button>\n            </div>\n           );\n    }\n}\n \nexport default JokeList;","import React, { Component } from 'react';\nimport './App.scss';\nimport JokeList from './JokeList';\n\nclass App extends Component {\n  state = {  }\n  render() { \n    return ( \n      <div className=\"App\">\n        <JokeList/>\n      </div>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}